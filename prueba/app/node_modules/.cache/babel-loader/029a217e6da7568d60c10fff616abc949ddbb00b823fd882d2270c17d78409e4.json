{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\3D Objects\\\\prueba\\\\prueba\\\\app\\\\src\\\\paginasOcultas\\\\paginaLectoraCSV.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Link, Route, Routes } from 'react-router-dom';\nimport axios from 'axios';\nimport { useState, useEffect, useCallback } from 'react';\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaginaLectoraCSV = () => {\n  _s();\n  const [file, setFile] = useState(\"\");\n  const [datos, setDatos] = useState([]);\n  // This state will store the parsed data\n  const [data, setData] = useState([]);\n\n  // Aqui almacenamos si nos ha metido un archivo no valido.\n  const [error, setError] = useState(\"\");\n  const allowedExtensions = [\"csv\"];\n  const URIRecetas = 'http://localhost:8000/recetas/';\n  const URIInstrucciones = 'http://localhost:8000/instrucciones/';\n  const URIIngredientes = 'http://localhost:8000/ingredientes/';\n  function sleep(milliseconds) {\n    var start = new Date().getTime();\n    for (var i = 0; i < 1e7; i++) {\n      if (new Date().getTime() - start > milliseconds) {\n        break;\n      }\n    }\n  }\n  // Esta funcion la vamos a llamar cuando se suba el archivo\n  const handleFileChange = e => {\n    setError(\"\");\n\n    // Check if user has entered the file\n    if (e.target.files.length) {\n      const inputFile = e.target.files[0];\n\n      // Check the file extensions, if it not\n      // included in the allowed extensions\n      // we show the error\n      const fileExtension = inputFile === null || inputFile === void 0 ? void 0 : inputFile.type.split(\"/\")[1];\n      if (!allowedExtensions.includes(fileExtension)) {\n        setError(\"Please input a csv file\");\n        return;\n      }\n\n      // If input type is correct set the state\n      setFile(inputFile);\n    }\n  };\n  function handleParse() {\n    // If user clicks the parse button without\n    // a file we show a error\n    if (!file) return setError(\"Enter a valid file\");\n\n    // Initialize a reader which allows user\n    // to read any file or blob.\n    const reader = new FileReader();\n\n    // Event listener on reader when the file\n    // loads, we parse it and set the data.\n    reader.onload = async _ref => {\n      let {\n        target\n      } = _ref;\n      const csv = Papa.parse(target.result, {\n        header: true\n      });\n      const parsedData = csv === null || csv === void 0 ? void 0 : csv.data;\n      const columns = Object.keys(parsedData[0]);\n      setData(columns);\n      setDatos(parsedData);\n      almacenar();\n    };\n    reader.readAsText(file);\n  }\n  ;\n  const almacenar = async e => {\n    for (const receta of datos) {\n      console.log(receta);\n      const responseIngredientes = await axios.post(URIIngredientes, {\n        ingredientes: receta.Ingredientes\n      });\n\n      // Guarda el ID de los ingredientes en la variable idIngredientes\n      const idIngredientes = responseIngredientes.data.message.pasar.id;\n\n      // Envía la solicitud HTTP para crear las instrucciones\n      const responseInstrucciones = await axios.post(URIInstrucciones, {\n        instruccion: receta.Pasos\n      });\n\n      // Guarda el ID de las instrucciones en la variable idInstrucciones\n      const idInstrucciones = responseInstrucciones.data.message.pasar.id;\n      const ver = await axios.post(URIRecetas, {\n        Tittle: receta.Nombre,\n        Ingredients_id: idIngredientes,\n        Instructions_id: idInstrucciones,\n        Image_Name: receta.NombreImagen,\n        comensales: receta.Comensales,\n        tiempo: receta.tiempo\n      });\n      console.log(ver);\n      sleep(20);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"BotonesAr\",\n      nombre: \"Subir Alumnos\",\n      onClick: handleParse,\n      children: \"Subir Archivo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: handleFileChange,\n      id: \"csvInput\",\n      name: \"file\",\n      type: \"File\",\n      className: \"inputBoton\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n_s(PaginaLectoraCSV, \"lyRVs1q9G1e07FIGNjVPArvVMGo=\");\n_c = PaginaLectoraCSV;\nexport default PaginaLectoraCSV;\nvar _c;\n$RefreshReg$(_c, \"PaginaLectoraCSV\");","map":{"version":3,"names":["React","Link","Route","Routes","axios","useState","useEffect","useCallback","Papa","jsxDEV","_jsxDEV","PaginaLectoraCSV","_s","file","setFile","datos","setDatos","data","setData","error","setError","allowedExtensions","URIRecetas","URIInstrucciones","URIIngredientes","sleep","milliseconds","start","Date","getTime","i","handleFileChange","e","target","files","length","inputFile","fileExtension","type","split","includes","handleParse","reader","FileReader","onload","_ref","csv","parse","result","header","parsedData","columns","Object","keys","almacenar","readAsText","receta","console","log","responseIngredientes","post","ingredientes","Ingredientes","idIngredientes","message","pasar","id","responseInstrucciones","instruccion","Pasos","idInstrucciones","ver","Tittle","Nombre","Ingredients_id","Instructions_id","Image_Name","NombreImagen","comensales","Comensales","tiempo","children","className","nombre","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","name","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/3D Objects/prueba/prueba/app/src/paginasOcultas/paginaLectoraCSV.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nimport { Link, Route, Routes } from 'react-router-dom';\r\nimport axios from 'axios'\r\nimport { useState, useEffect, useCallback } from 'react'\r\nimport Papa from \"papaparse\";\r\n\r\nconst PaginaLectoraCSV = () => {\r\n    const [file, setFile] = useState(\"\");\r\n    const [datos, setDatos] = useState([]);\r\n    // This state will store the parsed data\r\n    const [data, setData] = useState([]);\r\n\r\n    // Aqui almacenamos si nos ha metido un archivo no valido.\r\n    const [error, setError] = useState(\"\");\r\n    const allowedExtensions = [\"csv\"];\r\n    const URIRecetas = 'http://localhost:8000/recetas/'\r\n    const URIInstrucciones = 'http://localhost:8000/instrucciones/'\r\n    const URIIngredientes = 'http://localhost:8000/ingredientes/'\r\n\r\n\r\n    function sleep(milliseconds) {\r\n        var start = new Date().getTime();\r\n        for (var i = 0; i < 1e7; i++) {\r\n            if ((new Date().getTime() - start) > milliseconds) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // Esta funcion la vamos a llamar cuando se suba el archivo\r\n    const handleFileChange = (e) => {\r\n        setError(\"\");\r\n\r\n        // Check if user has entered the file\r\n        if (e.target.files.length) {\r\n            const inputFile = e.target.files[0];\r\n\r\n            // Check the file extensions, if it not\r\n            // included in the allowed extensions\r\n            // we show the error\r\n            const fileExtension = inputFile?.type.split(\"/\")[1];\r\n            if (!allowedExtensions.includes(fileExtension)) {\r\n                setError(\"Please input a csv file\");\r\n                return;\r\n            }\r\n\r\n            // If input type is correct set the state\r\n            setFile(inputFile);\r\n        }\r\n    };\r\n    function handleParse() {\r\n        // If user clicks the parse button without\r\n        // a file we show a error\r\n        if (!file) return setError(\"Enter a valid file\");\r\n\r\n        // Initialize a reader which allows user\r\n        // to read any file or blob.\r\n        const reader = new FileReader();\r\n\r\n        // Event listener on reader when the file\r\n        // loads, we parse it and set the data.\r\n        reader.onload = async ({ target }) => {\r\n            const csv = Papa.parse(target.result, { header: true });\r\n            const parsedData = csv?.data;\r\n            const columns = Object.keys(parsedData[0]);\r\n            setData(columns);\r\n            setDatos(parsedData);\r\n            almacenar();\r\n        };\r\n        reader.readAsText(file);\r\n    };\r\n\r\n    const almacenar = async (e) => {\r\n        for (const receta of datos) {\r\n            console.log(receta)\r\n            const responseIngredientes = await axios.post(URIIngredientes, {\r\n                ingredientes: receta.Ingredientes\r\n            })\r\n    \r\n            // Guarda el ID de los ingredientes en la variable idIngredientes\r\n            const idIngredientes = responseIngredientes.data.message.pasar.id\r\n    \r\n            // Envía la solicitud HTTP para crear las instrucciones\r\n            const responseInstrucciones = await axios.post(URIInstrucciones, {\r\n                instruccion: receta.Pasos\r\n            })\r\n    \r\n            // Guarda el ID de las instrucciones en la variable idInstrucciones\r\n            const idInstrucciones = responseInstrucciones.data.message.pasar.id\r\n    \r\n            const ver =await axios.post(URIRecetas, {\r\n                Tittle: receta.Nombre,\r\n                Ingredients_id: idIngredientes,\r\n                Instructions_id: idInstrucciones,\r\n                Image_Name: receta.NombreImagen,\r\n                comensales: receta.Comensales,\r\n                tiempo: receta.tiempo\r\n            })\r\n            console.log(ver)\r\n            sleep(20)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className=\"BotonesAr\" nombre=\"Subir Alumnos\" onClick={handleParse}>Subir Archivo</button>\r\n            <input\r\n                onChange={handleFileChange}\r\n                id=\"csvInput\"\r\n                name=\"file\"\r\n                type=\"File\"\r\n                className=\"inputBoton\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default PaginaLectoraCSV"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}